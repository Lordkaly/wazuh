/*
 * Wazuh Vulnerability scanner - Scan Orchestrator
 * Copyright (C) 2015, Wazuh Inc.
 * Nov 23, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _DETAILS_AUGMENTATION_HPP
#define _DETAILS_AUGMENTATION_HPP

#include "chainOfResponsability.hpp"
#include "databaseFeedManager.hpp"
#include "numericHelper.h"
#include "scanContext.hpp"
#include "timeHelper.h"

/**
 * @brief DetailsAugmentation class.
 *
 */
class DetailsAugmentation final : public AbstractHandler<std::shared_ptr<ScanContext>>
{
private:
    std::shared_ptr<DatabaseFeedManager> m_databaseFeedManager;
    void indexedDataAugmentation(std::shared_ptr<ScanContext> data)
    {
        if (data->getType() == ScannerType::PackageDelete || data->getType() == ScannerType::PackagesClear)
        {
            return;
        }

        nlohmann::json package;
        package["architecture"] = data->packageArchitecture();
        package["build_version"] = ""; // TODO: Add build version.
        package["checksum"] = "";      // TODO: Add checksum.
        package["description"] = data->packageDescription();
        package["install_scope"] = ""; // TODO: Add install scope.

        if (!data->packageInstallTime().empty())
        {
            const auto installTime {Utils::rawTimestampToISO8601(data->packageInstallTime().data())};
            if (!installTime.empty())
            {
                package["installed"] = installTime;
            }
        }
        package["license"] = ""; // TODO: Add license.
        package["name"] = data->packageName();
        package["path"] = data->packageLocation();
        package["reference"] = ""; // TODO: Add reference.
        package["size"] = data->packageSize();
        package["type"] = data->packageFormat();
        package["version"] = data->packageVersion();

        nlohmann::json ecs;
        ecs["version"] = "8.11.0";

        nlohmann::json agent;
        agent["build"]["original"] = REVISION; // TODO The revision is from the agent.
        agent["ephemeral_id"] = data->agentNodeName();
        agent["id"] = data->agentId();
        agent["name"] = data->agentName();
        agent["type"] = "wazuh";
        agent["version"] = VERSION; // TODO The version is from the agent.

        nlohmann::json os;
        std::string fullName;
        fullName.append(data->osName().data());
        fullName.append(" ");
        fullName.append(data->osPlatform().compare("darwin") == 0 ? data->osCodeName().data()
                                                                  : data->osVersion().data());

        std::string version = data->osMajorVersion().data();
        if (!data->osMinorVersion().empty())
        {
            version += ".";
            version += data->osMinorVersion();
        }
        if (!data->osPatch().empty())
        {
            version += ".";
            version += data->osPatch();
        }
        if (!data->osBuild().empty())
        {
            version += ".";
            version += data->osBuild();
        }

        os["family"] = ""; // TODO: Add family.
        os["full"] = fullName;
        os["kernel"] = data->osKernelRelease();
        os["name"] = data->osName();
        os["platform"] = Utils::toLowerCase(data->osPlatform().data());
        os["type"] =
            Utils::toLowerCase(data->osPlatform().compare("darwin") == 0 ? "macos" : data->osPlatform().data());
        os["version"] = version;

        for (auto& [cve, json] : data->m_elements)
        {
            FlatbufferDataPair<VulnerabilityDescription> returnData;
            m_databaseFeedManager->getVulnerabiltyDescriptiveInformation(cve, returnData);
            if (returnData.data)
            {
                auto ecsData = nlohmann::json::object();
                // ECS agent fields.
                ecsData["agent"] = agent;
                // ECS fields.
                ecsData["ecs"] = ecs;
                // ECS package fields.
                ecsData["package"] = package;
                // ECS os fields.
                ecsData["host"]["os"] = os;
                // ECS vulnerability fields.
                ecsData["vulnerability"]["category"] = "Packages";
                ecsData["vulnerability"]["classification"] = returnData.data->classification()->str();
                ecsData["vulnerability"]["description"] = returnData.data->description()->str();
                ecsData["vulnerability"]["enumeration"] = "CVE";
                ecsData["vulnerability"]["id"] = cve;
                ecsData["vulnerability"]["reference"] = returnData.data->reference()->str();
                ecsData["vulnerability"]["report_id"] = ""; // TODO: Add report id.
                ecsData["vulnerability"]["scanner"]["vendor"] = "Wazuh";
                ecsData["vulnerability"]["score"]["base"] = Utils::floatToDoubleRound(returnData.data->scoreBase(), 2);
                ecsData["vulnerability"]["score"]["environmental"] = 0.0f; // TODO: Add environmental score.
                ecsData["vulnerability"]["score"]["temporal"] = 0.0f;      // TODO: Add temporal score.
                ecsData["vulnerability"]["score"]["version"] = returnData.data->scoreVersion()->str();
                ecsData["vulnerability"]["severity"] = Utils::toSentenceCase(returnData.data->severity()->str());
                // ECS base fields.
                ecsData["@timestamp"] = Utils::getCurrentISO8601();

                json["operation"] = "INSERTED";
                json["id"] = std::string(data->agentNodeName()) + "_" + std::string(data->agentId()) + "_" +
                             std::string(data->packageItemId()) + "_" + cve;
                json["data"] = ecsData;
            }
        }
    }

    void alertedDataAugmentation(std::shared_ptr<ScanContext> data)
    {
        if (data->getType() != ScannerType::PackagesClear)
        {
            nlohmann::json package;
            package["architecture"] = data->packageArchitecture();
            package["name"] = data->packageName();
            package["version"] = data->packageVersion();

            if (data->getType() == ScannerType::PackageInsert)
            {
                package["description"] = data->packageDescription();
                if (!data->packageInstallTime().empty())
                {
                    package["install_time"] = data->packageInstallTime();
                }
                package["path"] = data->packageLocation();
                package["size"] = data->packageSize();
                package["type"] = data->packageFormat();
            }

            for (auto& [cve, json] : data->m_alerts)
            {
                FlatbufferDataPair<VulnerabilityDescription> returnData;
                m_databaseFeedManager->getVulnerabiltyDescriptiveInformation(cve, returnData);
                if (returnData.data)
                {
                    json["vulnerability"]["package"] = package;
                    json["vulnerability"]["category"] = "Packages";
                    json["vulnerability"]["classification"] = returnData.data->classification()->str();
                    json["vulnerability"]["description"] = returnData.data->description()->str();
                    json["vulnerability"]["enumeration"] = "CVE";
                    json["vulnerability"]["cve"] = cve;
                    json["vulnerability"]["reference"] = returnData.data->reference()->str();
                    json["vulnerability"]["severity"] = Utils::toSentenceCase(returnData.data->severity()->str());
                    json["vulnerability"]["score"]["base"] = Utils::floatToDoubleRound(returnData.data->scoreBase(), 2);
                    json["vulnerability"]["score"]["version"] = returnData.data->scoreVersion()->str();
                    json["vulnerability"]["status"] =
                        data->getType() == ScannerType::PackageInsert ? "Active" : "Solved";
                }
            }
        }
        else
        {
            nlohmann::json report;
            report["vulnerability"]["category"] = "Packages";
            report["vulnerability"]["status"] = "Clear";

            data->m_alerts.emplace(std::make_pair("clear", report));
        }
    }

public:
    // LCOV_EXCL_START
    /**
     * @brief DetailsAugmentation constructor.
     *
     * @param databaseFeedManager Database feed manager.
     */
    explicit DetailsAugmentation(std::shared_ptr<DatabaseFeedManager>& databaseFeedManager)
        : m_databaseFeedManager(databaseFeedManager)
    {
    }
    /**
     * @brief Handles request and passes control to the next step of the chain.
     *
     * @param data Scan context.
     * @return std::shared_ptr<ScanContext> Abstract handler.
     */
    std::shared_ptr<ScanContext> handleRequest(std::shared_ptr<ScanContext> data) override
    {
        indexedDataAugmentation(data);
        alertedDataAugmentation(data);

        return AbstractHandler<std::shared_ptr<ScanContext>>::handleRequest(data);
    }
    // LCOV_EXCL_STOP
};

#endif // _DETAILS_AUGMENTATION_HPP
